
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	int numberOfErrorsRecoveredFrom;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	numberOfErrorsRecoveredFrom++;
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left).append(". Redni broj greske ").append(numberOfErrorsRecoveredFrom);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
	numberOfErrorsRecoveredFrom=0;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, MINUS, COMMA, VOID, RANGE;
terminal PRINT, READ, CLASS, BREAK, IF, ELSE, CONST, NEW, EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE, USING;
terminal LBRACKET, RBRACKET;
terminal AND, OR, MUL, DIV, MOD, SQ; 
terminal DOTACCESS, COLON, INCR, DECR, LAMBDA, GOTO;
terminal EQ, NEQ, GT, GEQ, LT, LEQ, STRING;
terminal Integer NUMBER;
terminal Integer BOOL;
terminal String IDENT;
terminal Character CHAR;

nonterminal VarDeclList, MethodDeclList, NamespaceList, Namespace, StaticVarDeclList, StaticInitList;
nonterminal FormPars, StatementBlock, OneStatement, Statement, StatementList, DeclarationsList, ConstDecl, VarDecl, ClassDecl;
nonterminal ConstTermList, ConstDeclList;
nonterminal Brackets, VarTermList, Extending, ClassMethods, ClassStuff;
nonterminal FormalParamList, FormalParamDecl, ForDesignatorStmtList;
nonterminal ActualPars, ActualParamList;
nonterminal ThereIsElse, ForInit, ForAfter;
nonterminal AddOp, RelOp, MulOp, AssignOp, Label, DesignatorHelper, DesignatorNamespace;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodTypeName, MethodDecl, Designator, DesignatorArray, DesignatorStatement, VarType, ConstType, NamespaceName, DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, CondFact, CondTerm, Condition, ConditionHelper, ForCondFact, ConditionTermHelper, CondFactForFor;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclarationsList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

NamespaceList ::= (NamespaceLists) NamespaceList Namespace:nmspc
			| (NoNamespaceLists) /* epsilon */
			;

Namespace ::= (Namespace) NAMESPACE NamespaceName:nsn LBRACE DeclarationsList LBRACE MethodDeclList RBRACE RBRACE;

NamespaceName ::= (NamespaceName) IDENT:nsName;

DeclarationsList ::= (ConstDeclarationList) DeclarationsList ConstDecl
			| (VarDeclarationList) DeclarationsList VarDecl
			| (ClassDeclarationList) DeclarationsList ClassDecl
			| (ErrorDecl) DeclarationsList error:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			| (NoDeclarationsList) /* epsilon */
			;

VarDecl ::= (VarDecl) VarType VarTermList:vtl SEMI;

VarType ::= (VarType) Type:vt;

VarDeclList ::= (VarDeclarationsList) VarDeclList VarDecl
			| (NoVarDeclList) /* epsilon */
			;

VarTermList ::= (VarTermOne) IDENT:varName
			| (VarTermListDecl) VarTermList COMMA IDENT:varName
			| (VarTermOneBrackets) IDENT:varName LBRACKET RBRACKET
			| (VarTermListDeclBrackets) VarTermList COMMA IDENT:varName LBRACKET RBRACKET
			| (ErrorVarTerm) error:l
		   	{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :}
			;

ConstDecl ::= (ConstDecl) CONST ConstType ConstTermList:ctl SEMI;

ConstType ::= (ConstType) Type:ct;

ConstDeclList ::= (ConstDeclarationsList) ConstDeclList ConstDecl
			| (ConstVarDeclList) /* epsilon */
			;

ConstTermList ::= (ConstTermOneNum) IDENT:name EQUAL NUMBER:n
			| (ConstTermListDeclNum) VarTermList COMMA IDENT:name EQUAL NUMBER:n
			| (ConstTermOneBool) IDENT:name EQUAL BOOL:b
			| (ConstTermListDeclBool) VarTermList COMMA IDENT:name EQUAL BOOL:b
			| (ConstTermOneChar) IDENT:name EQUAL CHAR:c
			| (ConstTermListDeclChar) VarTermList COMMA IDENT:name EQUAL CHAR:c
			| (ErrorConstTerm) error:l
		   	{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :}
			;

Brackets ::= (BracketPair) LBRACKET RBRACKET
			| (NoBrackets) /* epsilon */
			;

ClassDecl ::= (ClassDecl) CLASS IDENT:cl Extending LBRACE /* StaticVarDeclList StaticInitList */VarDeclList ClassMethods RBRACE;

ClassMethods ::= (ClassesMethods) LBRACE MethodDeclList RBRACE
			| (NoClassMethods) /* epsilon */
			;

Extending ::= (Extend) EXTENDS Type
	| (NoExt) /* epsilon */
	;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				| (NoMethodDecl) /* epsilon */
				;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodTypeNameAny) Type:retType IDENT:methName
				| (VoidMethodTypeName) VOID IDENT:methName
				;

StatementList ::= (Statements) StatementList Statement 
				| (NoStmt) /* epsilon */
				;

Statement ::= (StmtBlock) StatementBlock
			| (OneStmt) OneStatement
			;

StatementBlock ::= (StatementBlock) LBRACE StatementList RBRACE;

OneStatement ::= (DesignatorStmt) DesignatorStatement SEMI
			| (ErrorStmt) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			| (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			| (PrintStmtAdv) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			| (ReadStmt) READ LPAREN Designator RPAREN SEMI
			| (ContinueStmt) CONTINUE SEMI
			| (BreakStmt) BREAK SEMI
			| (RetStmt) RETURN Expr:e SEMI
			| (EmptyRetStmt) RETURN SEMI
			| (IfStmtElse) IF LPAREN ConditionHelper RPAREN Statement ThereIsElse Statement
			| (IfStmt) IF LPAREN ConditionHelper RPAREN Statement
			| (ForStmt) FOR LPAREN ForInit SEMI ForCondFact SEMI ForAfter RPAREN Statement
			| (UsingStmt) USING NAMESPACE IDENT SEMI
			| (GoToStmt) GOTO IDENT SEMI
			| (LabelStmt) IDENT COLON
			;

ForCondFact ::= (ForCondFactor) CondFactForFor
			| (NoForCondFact) /* epsilon */
			;

CondFactForFor ::= (TwoCondFactForFor) Expr:e RelOp Expr:ee
			| (OneCondFactForFor) Expr
			;

ForInit ::= (ForInitYes) ForDesignatorStmtList
				| (NoForInit) /* epsilon */
				;

ForAfter ::= (ForAfterYes) ForDesignatorStmtList
				| (NoForAfter) /* epsilon */
				;

ForDesignatorStmtList ::= (FDSList) ForDesignatorStmtList COMMA DesignatorStatement
						| (OneFDS) DesignatorStatement
						;

ThereIsElse ::= (ThereIsElse) ELSE;

ConditionHelper ::= (ConditionHelper) Condition;

Condition ::= (ConditionList) Condition OR ConditionTermHelper
			| (ConditionOneTerm) ConditionTermHelper
			| (ErrorCondition) error:l
		   	{: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :}
			;

ConditionTermHelper ::= (ConditionTermHelper) CondTerm;

CondTerm ::= (ConditionTermList) CondTerm AND CondFact
			| (ConditionOneFact) CondFact
			;

CondFact ::= (TwoCondFact) Expr:e RelOp Expr:ee
			| (OneCondFact) Expr
			;

DesignatorStatement ::= (DesignatorProc) Designator LPAREN ActualPars RPAREN
					| (DesignatorAssign) Designator AssignOp Expr
					| (DesignatorBrackets) LBRACKET DesignatorHelper RBRACKET EQUAL Designator
					| (DesignatorInc) Designator INCR
					| (DesignatorDec) Designator DECR
					;

DesignatorHelper ::= (DesignatorHelper) DesignatorArray MUL Designator;

DesignatorArray ::= (DesignatorArr) DesignatorArray Designator COMMA
				| (CommaDesignatorArr) DesignatorArray COMMA
				| (NoDesignatorArr) /* epsilon */
				;

FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;

FormalParamList ::= (FormalParamDeclList) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				| (ErrorFormalParamDecl) error:l
		   		{: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :}
				;
				
FormalParamDecl ::= (FormalParamDecls) Type:fParType IDENT:fParName
				| (FormalParamDeclBrackets) Type:fParType IDENT:fParName LBRACKET RBRACKET
				;

Type ::= (TypeNormal) IDENT:typeName
		| (TypeFromNamespace) IDENT:nmspc COLON COLON IDENT:typeName
		;

Expr ::= (AddExpr) Expr:te AddOp Term:t
	 |
	 (TermExpr) Term:t
	 |
	 (MinusTermExpr) MINUS Term:t
	 ;

Term ::= (TermList) Term:t MulOp:mo Factor:f
		| (OneFact) Factor:fact
		;

Factor ::= (FactorNumConst) NUMBER
		| (FactorCharConst) CHAR
		| (FactorBoolConst) BOOL
		| (FactorVar) Designator:d
		| (FactorRange) RANGE LPAREN Expr:e RPAREN
		| (FactorFuncCall) Designator:func LPAREN ActualPars RPAREN
		| (ParenExpr) LPAREN Expr:e RPAREN
		/* | (NewClass) NEW Type */
		| (NewArr) NEW Type LBRACKET Expr:e RBRACKET
		/* | (NewClassConstruct) NEW Type LPAREN ActualPars RPAREN */
		;

ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;

Designator ::= (DesignatorList) DesignatorName
			| (DesignatorListNmspc) IDENT:nmspc COLON COLON DesignatorName
			/* | (OneDesignatorAccess) Designator:d1 DOTACCESS IDENT:name */
			| (OneDesignatorArr) Designator:d2 LBRACKET Expr:e RBRACKET
			;

DesignatorName ::= (DesignatorName) IDENT:name;

Label ::= (Label) IDENT:labelName;

AddOp ::= (AddOper) PLUS
		| (SubOper) MINUS
		;

RelOp ::= (GTOp) GT
		| (GEQOp) GEQ
		| (LTOp) LT
		| (LEQOp) LEQ
		| (EQOp) EQ
		| (NEQOp) NEQ
		;

MulOp ::= (MULTOp) MUL
		| (DIVOp) DIV
		| (MODOp) MOD
		| (SQOp) SQ
		;

AssignOp ::= (AssignOp) EQUAL;
