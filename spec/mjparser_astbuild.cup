
package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	int numberOfErrorsRecoveredFrom;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	numberOfErrorsRecoveredFrom++;
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left).append(". Redni broj greske ").append(numberOfErrorsRecoveredFrom);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
	numberOfErrorsRecoveredFrom=0;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, MINUS, COMMA, VOID, RANGE;
terminal PRINT, READ, CLASS, BREAK, IF, ELSE, CONST, NEW, EXTENDS, CONTINUE, FOR, STATIC, NAMESPACE, USING;
terminal LBRACKET, RBRACKET;
terminal AND, OR, MUL, DIV, MOD, SQ; 
terminal DOTACCESS, COLON, INCR, DECR, LAMBDA, GOTO;
terminal EQ, NEQ, GT, GEQ, LT, LEQ, STRING;
terminal Integer NUMBER;
terminal Integer BOOL;
terminal String IDENT;
terminal Character CHAR;

nonterminal VarDeclList VarDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal NamespaceList NamespaceList;
nonterminal Namespace Namespace;
nonterminal StaticVarDeclList StaticVarDeclList;
nonterminal StaticInitList StaticInitList;
nonterminal FormPars FormPars;
nonterminal StatementBlock StatementBlock;
nonterminal OneStatement OneStatement;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal DeclarationsList DeclarationsList;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstTermList ConstTermList;
nonterminal ConstDeclList ConstDeclList;
nonterminal Brackets Brackets;
nonterminal VarTermList VarTermList;
nonterminal Extending Extending;
nonterminal ClassMethods ClassMethods;
nonterminal ClassStuff ClassStuff;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal ForDesignatorStmtList ForDesignatorStmtList;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList;
nonterminal ThereIsElse ThereIsElse;
nonterminal ForInit ForInit;
nonterminal ForAfter ForAfter;
nonterminal AddOp AddOp;
nonterminal RelOp RelOp;
nonterminal MulOp MulOp;
nonterminal AssignOp AssignOp;
nonterminal Label Label;
nonterminal DesignatorHelper DesignatorHelper;
nonterminal DesignatorNamespace DesignatorNamespace;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodTypeName, MethodDecl, Designator, DesignatorArray, DesignatorStatement, VarType, ConstType, NamespaceName, DesignatorName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, CondFact, CondTerm, Condition, ConditionHelper, ForCondFact, ConditionTermHelper, CondFactForFor;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclarationsList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

NamespaceList ::= (NamespaceLists) NamespaceList:N1 Namespace:nmspc {: RESULT=new NamespaceLists(N1, nmspc); RESULT.setLine(N1left); :}
			| (NoNamespaceLists) {: RESULT=new NoNamespaceLists(); :} /* epsilon */
			;

Namespace ::= (Namespace) NAMESPACE NamespaceName:nsn LBRACE DeclarationsList:D1 LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new Namespace(nsn, D1, M2); RESULT.setLine(nsnleft); :};

NamespaceName ::= (NamespaceName) IDENT:nsName {: RESULT=new NamespaceName(nsName); RESULT.setLine(nsNameleft); :};

DeclarationsList ::= (ConstDeclarationList) DeclarationsList:D1 ConstDecl:C2 {: RESULT=new ConstDeclarationList(D1, C2); RESULT.setLine(D1left); :}
			| (VarDeclarationList) DeclarationsList:D1 VarDecl:V2 {: RESULT=new VarDeclarationList(D1, V2); RESULT.setLine(D1left); :}
			| (ClassDeclarationList) DeclarationsList:D1 ClassDecl:C2 {: RESULT=new ClassDeclarationList(D1, C2); RESULT.setLine(D1left); :}
			| (ErrorDecl) DeclarationsList:D1 error:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorDecl(D1); RESULT.setLine(D1left); :}
			| (NoDeclarationsList) {: RESULT=new NoDeclarationsList(); :} /* epsilon */
			;

VarDecl ::= (VarDecl) VarType:V1 VarTermList:vtl SEMI {: RESULT=new VarDecl(V1, vtl); RESULT.setLine(V1left); :};

VarType ::= (VarType) Type:vt {: RESULT=new VarType(vt); RESULT.setLine(vtleft); :};

VarDeclList ::= (VarDeclarationsList) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarationsList(V1, V2); RESULT.setLine(V1left); :}
			| (NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */
			;

VarTermList ::= (VarTermOne) IDENT:varName {: RESULT=new VarTermOne(varName); RESULT.setLine(varNameleft); :}
			| (VarTermListDecl) VarTermList:V1 COMMA IDENT:varName {: RESULT=new VarTermListDecl(V1, varName); RESULT.setLine(V1left); :}
			| (VarTermOneBrackets) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarTermOneBrackets(varName); RESULT.setLine(varNameleft); :}
			| (VarTermListDeclBrackets) VarTermList:V1 COMMA IDENT:varName LBRACKET RBRACKET {: RESULT=new VarTermListDeclBrackets(V1, varName); RESULT.setLine(V1left); :}
			| (ErrorVarTerm) error:l
		   	{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new ErrorVarTerm(); :}
			;

ConstDecl ::= (ConstDecl) CONST ConstType:C1 ConstTermList:ctl SEMI {: RESULT=new ConstDecl(C1, ctl); RESULT.setLine(C1left); :};

ConstType ::= (ConstType) Type:ct {: RESULT=new ConstType(ct); RESULT.setLine(ctleft); :};

ConstDeclList ::= (ConstDeclarationsList) ConstDeclList:C1 ConstDecl:C2 {: RESULT=new ConstDeclarationsList(C1, C2); RESULT.setLine(C1left); :}
			| (ConstVarDeclList) {: RESULT=new ConstVarDeclList(); :} /* epsilon */
			;

ConstTermList ::= (ConstTermOneNum) IDENT:name EQUAL NUMBER:n {: RESULT=new ConstTermOneNum(name, n); RESULT.setLine(nameleft); :}
			| (ConstTermListDeclNum) VarTermList:V1 COMMA IDENT:name EQUAL NUMBER:n {: RESULT=new ConstTermListDeclNum(V1, name, n); RESULT.setLine(V1left); :}
			| (ConstTermOneBool) IDENT:name EQUAL BOOL:b {: RESULT=new ConstTermOneBool(name, b); RESULT.setLine(nameleft); :}
			| (ConstTermListDeclBool) VarTermList:V1 COMMA IDENT:name EQUAL BOOL:b {: RESULT=new ConstTermListDeclBool(V1, name, b); RESULT.setLine(V1left); :}
			| (ConstTermOneChar) IDENT:name EQUAL CHAR:c {: RESULT=new ConstTermOneChar(name, c); RESULT.setLine(nameleft); :}
			| (ConstTermListDeclChar) VarTermList:V1 COMMA IDENT:name EQUAL CHAR:c {: RESULT=new ConstTermListDeclChar(V1, name, c); RESULT.setLine(V1left); :}
			| (ErrorConstTerm) error:l
		   	{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new ErrorConstTerm(); :}
			;

Brackets ::= (BracketPair) LBRACKET RBRACKET {: RESULT=new BracketPair(); :}
			| (NoBrackets) {: RESULT=new NoBrackets(); :} /* epsilon */
			;

ClassDecl ::= (ClassDecl) CLASS IDENT:cl Extending:E1 LBRACE /* StaticVarDeclList StaticInitList */VarDeclList:V2 ClassMethods:C3 RBRACE {: RESULT=new ClassDecl(cl, E1, V2, C3); RESULT.setLine(clleft); :};

ClassMethods ::= (ClassesMethods) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassesMethods(M1); RESULT.setLine(M1left); :}
			| (NoClassMethods) {: RESULT=new NoClassMethods(); :} /* epsilon */
			;

Extending ::= (Extend) EXTENDS Type:T1 {: RESULT=new Extend(T1); RESULT.setLine(T1left); :}
	| (NoExt) {: RESULT=new NoExt(); :} /* epsilon */
	;

MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				| (NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
				;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :};

MethodTypeName ::= (MethodTypeNameAny) Type:retType IDENT:methName {: RESULT=new MethodTypeNameAny(retType, methName); RESULT.setLine(retTypeleft); :}
				| (VoidMethodTypeName) VOID IDENT:methName {: RESULT=new VoidMethodTypeName(methName); RESULT.setLine(methNameleft); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
				| (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;

Statement ::= (StmtBlock) StatementBlock:S1 {: RESULT=new StmtBlock(S1); RESULT.setLine(S1left); :}
			| (OneStmt) OneStatement:O1 {: RESULT=new OneStmt(O1); RESULT.setLine(O1left); :}
			;

StatementBlock ::= (StatementBlock) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementBlock(S1); RESULT.setLine(S1left); :};

OneStatement ::= (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
			| (ErrorStmt) error SEMI:l
		   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new ErrorStmt(); :}
			| (PrintStmt) PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :}
			| (PrintStmtAdv) PRINT LPAREN Expr:E1 COMMA NUMBER:N2 RPAREN SEMI {: RESULT=new PrintStmtAdv(E1, N2); RESULT.setLine(E1left); :}
			| (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			| (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			| (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			| (RetStmt) RETURN Expr:e SEMI {: RESULT=new RetStmt(e); RESULT.setLine(eleft); :}
			| (EmptyRetStmt) RETURN SEMI {: RESULT=new EmptyRetStmt(); :}
			| (IfStmtElse) IF LPAREN ConditionHelper:C1 RPAREN Statement:S2 ThereIsElse:T3 Statement:S4 {: RESULT=new IfStmtElse(C1, S2, T3, S4); RESULT.setLine(C1left); :}
			| (IfStmt) IF LPAREN ConditionHelper:C1 RPAREN Statement:S2 {: RESULT=new IfStmt(C1, S2); RESULT.setLine(C1left); :}
			| (ForStmt) FOR LPAREN ForInit:F1 SEMI ForCondFact:F2 SEMI ForAfter:F3 RPAREN Statement:S4 {: RESULT=new ForStmt(F1, F2, F3, S4); RESULT.setLine(F1left); :}
			| (UsingStmt) USING NAMESPACE IDENT:I1 SEMI {: RESULT=new UsingStmt(I1); RESULT.setLine(I1left); :}
			| (GoToStmt) GOTO IDENT:I1 SEMI {: RESULT=new GoToStmt(I1); RESULT.setLine(I1left); :}
			| (LabelStmt) IDENT:I1 COLON {: RESULT=new LabelStmt(I1); RESULT.setLine(I1left); :}
			;

ForCondFact ::= (ForCondFactor) CondFactForFor:C1 {: RESULT=new ForCondFactor(C1); RESULT.setLine(C1left); :}
			| (NoForCondFact) {: RESULT=new NoForCondFact(); :} /* epsilon */
			;

CondFactForFor ::= (TwoCondFactForFor) Expr:e RelOp:R1 Expr:ee {: RESULT=new TwoCondFactForFor(e, R1, ee); RESULT.setLine(eleft); :}
			| (OneCondFactForFor) Expr:E1 {: RESULT=new OneCondFactForFor(E1); RESULT.setLine(E1left); :}
			;

ForInit ::= (ForInitYes) ForDesignatorStmtList:F1 {: RESULT=new ForInitYes(F1); RESULT.setLine(F1left); :}
				| (NoForInit) {: RESULT=new NoForInit(); :} /* epsilon */
				;

ForAfter ::= (ForAfterYes) ForDesignatorStmtList:F1 {: RESULT=new ForAfterYes(F1); RESULT.setLine(F1left); :}
				| (NoForAfter) {: RESULT=new NoForAfter(); :} /* epsilon */
				;

ForDesignatorStmtList ::= (FDSList) ForDesignatorStmtList:F1 COMMA DesignatorStatement:D2 {: RESULT=new FDSList(F1, D2); RESULT.setLine(F1left); :}
						| (OneFDS) DesignatorStatement:D1 {: RESULT=new OneFDS(D1); RESULT.setLine(D1left); :}
						;

ThereIsElse ::= (ThereIsElse) ELSE {: RESULT=new ThereIsElse(); :};

ConditionHelper ::= (ConditionHelper) Condition:C1 {: RESULT=new ConditionHelper(C1); RESULT.setLine(C1left); :};

Condition ::= (ConditionList) Condition:C1 OR ConditionTermHelper:C2 {: RESULT=new ConditionList(C1, C2); RESULT.setLine(C1left); :}
			| (ConditionOneTerm) ConditionTermHelper:C1 {: RESULT=new ConditionOneTerm(C1); RESULT.setLine(C1left); :}
			| (ErrorCondition) error:l
		   	{: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :} {: RESULT=new ErrorCondition(); :}
			;

ConditionTermHelper ::= (ConditionTermHelper) CondTerm:C1 {: RESULT=new ConditionTermHelper(C1); RESULT.setLine(C1left); :};

CondTerm ::= (ConditionTermList) CondTerm:C1 AND CondFact:C2 {: RESULT=new ConditionTermList(C1, C2); RESULT.setLine(C1left); :}
			| (ConditionOneFact) CondFact:C1 {: RESULT=new ConditionOneFact(C1); RESULT.setLine(C1left); :}
			;

CondFact ::= (TwoCondFact) Expr:e RelOp:R1 Expr:ee {: RESULT=new TwoCondFact(e, R1, ee); RESULT.setLine(eleft); :}
			| (OneCondFact) Expr:E1 {: RESULT=new OneCondFact(E1); RESULT.setLine(E1left); :}
			;

DesignatorStatement ::= (DesignatorProc) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new DesignatorProc(D1, A2); RESULT.setLine(D1left); :}
					| (DesignatorAssign) Designator:D1 AssignOp:A2 Expr:E3 {: RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); :}
					| (DesignatorBrackets) LBRACKET DesignatorHelper:D1 RBRACKET EQUAL Designator:D2 {: RESULT=new DesignatorBrackets(D1, D2); RESULT.setLine(D1left); :}
					| (DesignatorInc) Designator:D1 INCR {: RESULT=new DesignatorInc(D1); RESULT.setLine(D1left); :}
					| (DesignatorDec) Designator:D1 DECR {: RESULT=new DesignatorDec(D1); RESULT.setLine(D1left); :}
					;

DesignatorHelper ::= (DesignatorHelper) DesignatorArray:D1 MUL Designator:D2 {: RESULT=new DesignatorHelper(D1, D2); RESULT.setLine(D1left); :};

DesignatorArray ::= (DesignatorArr) DesignatorArray:D1 Designator:D2 COMMA {: RESULT=new DesignatorArr(D1, D2); RESULT.setLine(D1left); :}
				| (CommaDesignatorArr) DesignatorArray:D1 COMMA {: RESULT=new CommaDesignatorArr(D1); RESULT.setLine(D1left); :}
				| (NoDesignatorArr) {: RESULT=new NoDesignatorArr(); :} /* epsilon */
				;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
		  |
		  (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */
		  ;

FormalParamList ::= (FormalParamDeclList) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDeclList(F1, F2); RESULT.setLine(F1left); :}
				|
				(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				| (ErrorFormalParamDecl) error:l
		   		{: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null);  :} {: RESULT=new ErrorFormalParamDecl(); :}
				;
				
FormalParamDecl ::= (FormalParamDecls) Type:fParType IDENT:fParName {: RESULT=new FormalParamDecls(fParType, fParName); RESULT.setLine(fParTypeleft); :}
				| (FormalParamDeclBrackets) Type:fParType IDENT:fParName LBRACKET RBRACKET {: RESULT=new FormalParamDeclBrackets(fParType, fParName); RESULT.setLine(fParTypeleft); :}
				;

Type ::= (TypeNormal) IDENT:typeName {: RESULT=new TypeNormal(typeName); RESULT.setLine(typeNameleft); :}
		| (TypeFromNamespace) IDENT:nmspc COLON COLON IDENT:typeName {: RESULT=new TypeFromNamespace(nmspc, typeName); RESULT.setLine(nmspcleft); :}
		;

Expr ::= (AddExpr) Expr:te AddOp:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
	 |
	 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
	 |
	 (MinusTermExpr) MINUS Term:t {: RESULT=new MinusTermExpr(t); RESULT.setLine(tleft); :}
	 ;

Term ::= (TermList) Term:t MulOp:mo Factor:f {: RESULT=new TermList(t, mo, f); RESULT.setLine(tleft); :}
		| (OneFact) Factor:fact {: RESULT=new OneFact(fact); RESULT.setLine(factleft); :}
		;

Factor ::= (FactorNumConst) NUMBER:N1 {: RESULT=new FactorNumConst(N1); RESULT.setLine(N1left); :}
		| (FactorCharConst) CHAR:C1 {: RESULT=new FactorCharConst(C1); RESULT.setLine(C1left); :}
		| (FactorBoolConst) BOOL:B1 {: RESULT=new FactorBoolConst(B1); RESULT.setLine(B1left); :}
		| (FactorVar) Designator:d {: RESULT=new FactorVar(d); RESULT.setLine(dleft); :}
		| (FactorRange) RANGE LPAREN Expr:e RPAREN {: RESULT=new FactorRange(e); RESULT.setLine(eleft); :}
		| (FactorFuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FactorFuncCall(func, A1); RESULT.setLine(funcleft); :}
		| (ParenExpr) LPAREN Expr:e RPAREN {: RESULT=new ParenExpr(e); RESULT.setLine(eleft); :}
		/* | (NewClass) NEW Type */
		| (NewArr) NEW Type:T1 LBRACKET Expr:e RBRACKET {: RESULT=new NewArr(T1, e); RESULT.setLine(T1left); :}
		/* | (NewClassConstruct) NEW Type LPAREN ActualPars RPAREN */
		;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :}
			|
			(NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				|
				(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;

Designator ::= (DesignatorList) DesignatorName:D1 {: RESULT=new DesignatorList(D1); RESULT.setLine(D1left); :}
			| (DesignatorListNmspc) IDENT:nmspc COLON COLON DesignatorName:D1 {: RESULT=new DesignatorListNmspc(nmspc, D1); RESULT.setLine(nmspcleft); :}
			/* | (OneDesignatorAccess) Designator:d1 DOTACCESS IDENT:name */
			| (OneDesignatorArr) Designator:d2 LBRACKET Expr:e RBRACKET {: RESULT=new OneDesignatorArr(d2, e); RESULT.setLine(d2left); :}
			;

DesignatorName ::= (DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};

Label ::= (Label) IDENT:labelName {: RESULT=new Label(labelName); RESULT.setLine(labelNameleft); :};

AddOp ::= (AddOper) PLUS {: RESULT=new AddOper(); :}
		| (SubOper) MINUS {: RESULT=new SubOper(); :}
		;

RelOp ::= (GTOp) GT {: RESULT=new GTOp(); :}
		| (GEQOp) GEQ {: RESULT=new GEQOp(); :}
		| (LTOp) LT {: RESULT=new LTOp(); :}
		| (LEQOp) LEQ {: RESULT=new LEQOp(); :}
		| (EQOp) EQ {: RESULT=new EQOp(); :}
		| (NEQOp) NEQ {: RESULT=new NEQOp(); :}
		;

MulOp ::= (MULTOp) MUL {: RESULT=new MULTOp(); :}
		| (DIVOp) DIV {: RESULT=new DIVOp(); :}
		| (MODOp) MOD {: RESULT=new MODOp(); :}
		| (SQOp) SQ {: RESULT=new SQOp(); :}
		;

AssignOp ::= (AssignOp) EQUAL {: RESULT=new AssignOp(); :};
