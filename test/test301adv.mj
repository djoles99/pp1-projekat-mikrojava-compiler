//Test 302

program test302

namespace Addition{

	const int dva=2;
	int trica;
	{
	
	
	int sum(int z, int d)
	{
		return z + d;
	}
	

	int inkrement(int a, int inc) 
		int pom; 
	{
		if(inc == 1) pom = 1;
		else if(inc == 2) pom = a;
		return sum(a,pom);
	}
	
	}
}

namespace Unpacking{
	int niz[],niz2[],niz3[];
	int a,b;
	
	{}
}

int i, h;
bool ibool;

int niz2;

int niz[];
int a, curr;

{
	
	
	bool verify() {
		print('v');
		return false;
	}	
	
	void main()
	{
		
		if(1!=1) print(-6);
		else print(0);
		
		for (i=0; i < 10; i++) {
			print(i);
			if(i==1) break;
			if(i==6) {continue;}
			print(i);
			if(i==1)
				for(;i<10;i++) {
					if(i==2) continue;
					print(i*10);
					if(i==3) break;
				}
			if(i==7) break;
		}
		//i=4;
		
		if(i == 3 && verify()) print(-4);
		else print(4);
		
		print(i);
	}
}

//Test 302

program test302

namespace Addition{

	{
	
	int sum(int z, int d)
	{
		return z + d;
	}
	

	int inkrement(int a, int inc) 
		int pom; 
	{
		if(inc == 1) pom = 1;
		else if(inc == 2) pom = a;

		return sum(a,pom);
	}
	
	}
}

namespace Unpacking{
	int niz[],niz2[],niz3[];
	int a,b;
	
	{}
}

int i;
bool ibool;

int niz2;

int niz[];
int a, curr;

{
	
	
	bool verify() {
		print('v');
		return false;
	}	
	
	void main()
	{
		
		if(1!=1) print(-6);
		else print(0);  
			
		ibool = false;
		//for(i=0; i < 5; i++){//------------------------------------for
		//	if(i == 2) ibool = true;
		//}
		i=5; ibool=true;//----
		
		if(ibool)
			if(i == 5) print(1);
			else print(-1); 	
		a = 2;	
		niz = new int[3];
		niz[0] = 1 * a;
		niz[1] = 2 * a;
		niz[2] = Addition::sum(niz[1], niz[0]) * a + 1;
		if(verify() || niz[2] == 4) print(ord('A')); 
		else print(ord('a'));
		
		print(eol);
		//for (i=0; i < 10; ) {//--------------------------------for
		//	if(i == 3)
		//	{
		//		i++;
		//		continue;
		//	}
		//	if(i == 4) break;
		//	i = Addition::inkrement(i, 1);
		//}
		i=4;
		
		if(i == 3 && verify()) print(-4);
		else print(4);  
		
		//read(niz[0]);//----------reads
		//read(niz[1]);
		//read(niz[2]);
		niz[0]=0;
		niz[1]=1;
		niz[2]=2;
		print(eol);
		print(Addition::sum(Addition::sum(niz[0], niz[1]), niz[2])); 
			
		print(eol); 
		print(Addition::inkrement(niz[2], 2));
		
		a = 3;
		//for (i=0; i < 3; i++){//--------------------------------for
		//	niz[i] = niz[i] * 2 * a;
		//}
		
		//for (i=0; i < 3; i++) print(niz[i]);//------------------------for
		print(eol);
		
		niz2 = 0;
		//for (i=0; i < 3; i++) niz2 = niz2 + niz[i] * niz[i];//-----------for
		print(niz2);
		
		Unpacking::niz = new int[3];
		Unpacking::niz[0] = 1;
		Unpacking::niz[1] = 2;
		Unpacking::niz[2] = 6;
		
		Unpacking::niz2 = new int[1];
		//[Unpacking::a,Unpacking::b,*Unpacking::niz2] = Unpacking::niz;
		print(Unpacking::a);
		print(Unpacking::b);
		print(Unpacking::niz2[0]);
		print(eol);
		
		Unpacking::niz2 = new int[1];
		//[,Unpacking::a,*Unpacking::niz2] = niz;
		print(Unpacking::a);
		print(Unpacking::niz2[0]);
		print(eol);

		Unpacking::niz2 = new int[2];
		Unpacking::niz3 = new int[1];
		//[Unpacking::niz2[0],Unpacking::niz2[Unpacking::niz[0]],*Unpacking::niz3] = Unpacking::niz;

		print(Unpacking::niz2[0]);
		print(Unpacking::niz2[1]);
		print(Unpacking::niz3[0]);
		print(eol);
		
		Unpacking::niz3 = new int[3];
		//[*Unpacking::niz3] = niz;
		print(Unpacking::niz3[0]);
		print(Unpacking::niz3[1]);
		print(Unpacking::niz3[2]);
		print(eol);
		
		// Unpacking::niz3 = new int[1];
		// [Unpacking::niz2[0],,Unpacking::niz2[Unpacking::niz[0]],*Unpacking::niz3] = Unpacking::niz; // runtime error!
	
	}
}


